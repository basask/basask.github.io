{"version":3,"sources":["components/task.js","components/job.js","components/help.js","services/solver_api.js","components/gant.js","App.js","serviceWorker.js","settings.js","index.js"],"names":["Task","props","resource","duration","className","Job","onFinish","useState","setResource","setDuration","tasks","setTasks","finishEdition","xs","md","type","label","value","onChange","ev","parseInt","target","color","size","variant","onClick","map","entry","key","length","Help","jobs","a","axios","post","response","console","log","error","solve","GantChar","solution","now","Date","_time","h","all_tasks","Object","keys","resource_id","task","task_id","push","job","start","end","width","height","chartType","loader","data","id","role","options","title","animation","startup","easing","timeline","groupByRowLabel","rootProps","App","setJobs","setSolution","onCalculateClick","solver_api","resources","fluid","key_t","Boolean","window","location","hostname","match","defaults","baseURL","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.3addcd5a.chunk.js","sourcesContent":["import React from 'react'\n\n\nfunction Task(props) {\n  const { resource, duration } = props\n  return (\n    <div className='task'>\n      <span className='task-resource'>{resource}</span>\n      <span className='task-duration'>{duration}</span>\n    </div>\n  )\n}\n\nexport default Task","import React, { useState } from 'react'\nimport Task from './task'\nimport { Button, Input, Panel, Row, Col } from 'muicss/react'\n\nfunction Job(props) {\n\n  const { onFinish } = props\n  const [resource, setResource] = useState(0)\n  const [duration, setDuration] = useState(1)\n  const [tasks, setTasks] = useState([])\n\n  function addTask() {\n    setTasks([...tasks, { resource, duration }])\n    setResource(resource + 1)\n  }\n\n  function onResourceChange(ev) {\n    setResource(parseInt(ev.target.value))\n  }\n\n  function onDurationChange(ev) {\n    setDuration(parseInt(ev.target.value))\n  }\n\n  function finishEdition() {\n    onFinish(tasks)\n    setTasks([])\n    setResource(0)\n  }\n\n  function renderFinish(){\n    if (tasks.length > 0)\n      return (\n        <Col xs={12} className='mui--text-right'>\n          <Button color='primary' onClick={finishEdition}>Add Job</Button>\n        </Col>\n      )\n    return (<span/>)\n  }\n\n  return (\n    <Row>\n      <Col xs={12}>\n        <div className=\"mui--text-display1\">New Job</div>\n      </Col>\n      <Col md={4}>\n        <Input type='number' label='Resource' value={resource} onChange={onResourceChange}></Input>\n      </Col>\n      <Col md={4}>\n        <Input type='number' label='Duration' value={duration} onChange={onDurationChange}></Input>\n      </Col>\n      <Col md={4}>\n        <Button color='primary' size='small' variant='fab' onClick={addTask}>+</Button>\n      </Col>\n      <Col xs={12}>\n        <div className='mui--text-subhead'>Tasks:</div>\n        {tasks.map((entry, key) => (<Task key={key} resource={entry.resource} duration={entry.duration}></Task>))}\n      </Col>\n      {renderFinish()}\n    </Row>\n  );\n}\n\nexport default Job","import React from 'react'\nimport Task from './task'\nimport { Row, Col } from 'muicss/react'\n\nfunction Help() {\n  return (\n    <Row>\n      <Col xs={12}>\n        <div className=\"mui--text-display1\">Task allocation</div>\n      </Col>\n      <Col xs={12}>\n        <p>A <b>Job</b> is a group of <b>Tasks</b> that needed to be performed, on a specific sequence, in order to get the job done.</p>\n        <p>To complete a <b>Task</b> we need to assign it to <b>Resource</b> and this <b>Resource</b> is gonna take some time to finish the task.</p>\n        <p>The time a <b>Resource</b> takes to finish a <b>Task</b> is called <b>Duration</b>. Bellow we can see how a <b>Task</b> looks like  in this simulation</p>\n      </Col>\n      <Col xs={12}>\n        <Task duration=\"Duration\" resource=\"Resource\"></Task>\n      </Col>\n      <Col xs={12}>\n        <p>The objective of this simulation is to organize the task excexution in a way we can finish all the tasks in the shortest time possible</p>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Help","import axios from 'axios'\n\n\nasync function solve(jobs) {\n\n    const solver_endpoint = '/solver-01/'\n\n    try {\n        const response = await axios.post(solver_endpoint, { jobs })\n        console.log('OK:', response)\n        return response\n    } catch (error) {\n        console.error(error)\n        return null\n    }\n}\n\n\nexport default {\n    solve\n}","import React from 'react'\nimport Chart from \"react-google-charts\";\n\nfunction GantChar(props) {\n\n  const { solution } = props\n  const now = Date.now()\n\n  function _time(h) {\n    const r_time = now\n    return new Date(r_time + (h * 60 * 60 * 1000));\n  }\n\n  const all_tasks = []\n\n  Object.keys(solution).map((key, resource_id) => {\n    const resource_tasks = solution[key]\n    resource_tasks.map((task, task_id) => {\n      all_tasks.push([\n        `Resource-${resource_id}`,\n        `Job-${task.job}`,\n        `Task-${task.task} of Job-${task.job}`,\n        _time(task.start),\n        _time(task.end),\n      ])\n    })\n  })\n\n  return (\n    <Chart\n      width={'100%'}\n      height={'500px'}\n      chartType=\"Timeline\"\n      loader={<div>Loading Chart</div>}\n      data={[\n        [\n          { type: 'string', id: 'Position' },\n          { type: 'string', id: 'Name' },\n          { type: 'string', role: 'tooltip' },\n          { type: 'date', id: 'Start' },\n          { type: 'date', id: 'End' },\n        ],\n        ...all_tasks\n      ]}\n      options={{        \n        title: 'Task   allocation',\n        animation: {\n          startup: true,\n          easing: 'linear',\n          duration: 300,\n        },\n        timeline: {\n          groupByRowLabel: true,\n        },\n      }}\n      rootProps={{ 'data-testid': '4' }}\n    />\n  )\n}\n\nexport default GantChar","import React, { useState } from 'react'\nimport Job from './components/job'\nimport Task from './components/task'\nimport Help from './components/help'\nimport { Button, Container, Panel, Col, Row } from 'muicss/react';\nimport solver_api from './services/solver_api'\nimport './App.css';\nimport GantChar from './components/gant';\n\n\nfunction App() {\n\n  const [jobs, setJobs] = useState([])\n  const [solution, setSolution] = useState({})\n\n  function jobFinished(tasks) {\n    setJobs([...jobs, tasks])\n  }\n\n  async function onCalculateClick() {\n    const response = await solver_api.solve(jobs)\n    console.log(response.data)\n    const {data} = response\n    const {resources} = data\n    console.log(`resources ${resources}`)\n    setSolution({...resources})\n  }\n\n  function renderJobOverview() {\n    if (jobs.length > 0) {\n      return (\n        <Panel>\n          <Row>\n            <Col xs={12}>\n              {\n                jobs.map((job, key) => {\n                  return (\n                    <div key={key}>\n                      JOB-{key}\n                      {\n                        job.map((task, key_t) => {\n                          return (\n                            <Task key={key_t} duration={task.duration} resource={task.resource} />\n                          )\n                        })\n                      }\n                    </div>\n                  )\n                })\n              }\n            </Col>\n\n            <Col xs={12} className=\"mui--text-right\">\n              <Button color=\"primary\" onClick={onCalculateClick}>Calculate</Button>\n            </Col>\n          </Row>\n        </Panel>\n      )\n    }\n    return (<span />)\n  }\n\n  function renderGant() {\n    console.log(`Rendering ${solution.length}`)\n    if (Object.keys(solution).length > 0)\n      return (\n        <Panel>\n          <GantChar solution={solution} ></GantChar>\n        </Panel>\n      )\n    return (<span/>)\n  }\n\n  return (\n    <Container fluid={false}>\n      {/* <Panel><Help /></Panel> */}\n      <Panel>\n        <Job onFinish={jobFinished}></Job>\n      </Panel>\n      {renderJobOverview()}\n      {renderGant()}\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\n\nif (process.env.NODE_ENV === \"development\")\n    axios.defaults.baseURL = 'http://localhost:5000'\n\nif (process.env.NODE_ENV === \"production\")\n    axios.defaults.baseURL = 'https://us-central1-basask-task-allocation.cloudfunctions.net'\n\nexport default axios","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './settings'\n\nimport './index.css';\nimport 'muicss/dist/css/mui.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}